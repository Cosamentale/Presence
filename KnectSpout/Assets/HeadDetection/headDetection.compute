
#pragma kernel CSMain
Texture2D<float4> reader;
Texture2D<float4> reader2;
Texture2D<float4> reader3;
Texture2D<float4> reader4;
RWTexture2D<float4> writer;
SamplerState _LinearClamp;
float _time;
float _resx;
float _resy;
[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID)
{
	float2 f = float2(id.x, id.y);
	float2 res = float2(_resx, _resy);
	float2 uv = f / res;
	float2 u1 = uv * float2(1., 0.5) + float2(0., 0.5);
	float2 e = float2(0.01, 0.);
	float v1 = reader2.SampleLevel(_LinearClamp, u1 + e.xy + 0.5 / res, 0).x;
	float v2 = reader2.SampleLevel(_LinearClamp, u1 - e.xy + 0.5 / res, 0).x;
	float v3 = reader2.SampleLevel(_LinearClamp, u1 + e.yx + 0.5 / res, 0).x;
	float v4 = reader2.SampleLevel(_LinearClamp, u1 - e.yx + 0.5 / res, 0).x;
	float v5 = smoothstep(0.2,1.,normalize(float2(max(abs(v1 - v2), abs(v3 - v4)), 0.2)).x);
	float r1 = 0.;
	if (_time < 0.5) {
		r1 = reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;
	}
	else{
		r1 = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a;
	}
	/*float bs = 1. / (_resx+1.);
	float bs2 = 1. / (_resy + 1.);
	float2 bs3 = float2(bs, bs2);
	float vm = 1000.;
	//float2 g = float2(0.,0.); float vtot = 0.;
	float2 pm = float2(0.5, 0.5);
	for (int i = 0; i <= int(_resx); i++)
		for (int j = 0; j <= int(_resy); j++) {
			float2 p = (float2(0.5, 0.5) + float2(i, j))*bs3;
			float v = reader.SampleLevel(_LinearClamp, p + 0.5 / res, 0).a;
			float v2 = 1. - v;

			//g += p * v;
			//vtot += v;
			if (v2 < vm) {
				vm = v2;
				pm = p;
			}

		}
	float d1 = smoothstep(0.05,0.04,distance(uv, pm));*/
	float r2 = smoothstep(0.2,0.5,abs(reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x - r1));
	writer[id] = float4(r2,r2,r2, r1);
}
