#pragma kernel CSMain
#pragma kernel CSMain2
#pragma kernel CSMain_t3
Texture2D<float4> reader; 
Texture2D<float4> reader2;
Texture2D<float4> reader3;
Texture2D<float4> reader4;
Texture2D<float4> reader5;
RWTexture2D<float4> writer;
SamplerState _LinearClamp;
SamplerState _LinearRepeat;
RWStructuredBuffer<float> t3Buffer2;
float _time;
float _time2;
float _resx;
float _resy;
float _speed1;
float _speed2;
float _speed3;
float _p1;
float _p2;
float _p3;
float _p4;
float _c1;
float _c2;
float _c3;
float _phase2;
float _phase2st;
float _phase2v;
float _phase3;
float _phase3st;
float _phase3st2;
float _phase3st3;
float _timePhase32;
float _timePhase31;
float _active;
float _bluractivation;
float _step1to2;
float _tsolo;
float _solo;
float _reg1;
float _reg2;
float _state;
float _dps;
float _lhv;
float4 _poca;
float _sp;
float _ff;

float3 exclusion(float3 s, float3 d)
{
	return s + d - 2.0 * s * d;
}
float ov(float a, float b) {
	return a > 0.5 ? 2.*a*b : 1. - 2.*(1. - a)*(1. - b);
}
float rd(float t) { return frac(sin(dot(floor(t), 45.269))*7845.236); }
float rs(float t) { return frac(sin(dot(t, 45.269))*7845.236); }
float hs(float2 uv) {
	float2 res = float2(1920., 1080.);  float2 u = uv*res  / 1024.;
return sin(reader5.SampleLevel(_LinearRepeat, u + 0.5 / res, 0).x*6.2831853071 + _time2*10.)*0.5 + 0.5; }

float hn(float2 uv) { float2 u = uv / 1024.; float2 res = float2(1920., 1080.);
return (reader5.SampleLevel(_LinearClamp, u + 0.5 / res, 0).x); }
float no(float t) { return lerp(rd(t), rd(t + 1.), smoothstep(0., 1., frac(t))); }
float rd(float2 t, float ti) { return frac(sin(dot(floor(t), float2(45.269, 98.129)))*7845.154 + ti); }
#define Pi 3.14159265359
float map2(float low1, float high1, float value) { return  (value - low1) / (high1 - low1); }
[numthreads(8, 8, 1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	float2 res=float2(_resx, _resy);
	float2 uv = f / res;
	float tt1 = (lerp(_ff - 1, floor(_timePhase31 / _speed1)*10. / res.y-1, _phase3))*(1.-_solo);
	float tt2 = (lerp(_ff - 1, floor(_timePhase32 / _speed1)*10. / res.y-1, _phase3) )*(1.-_solo);

	float ba = uv.x;

	float f10 = frac(tt1);
	float f12 = frac(tt2);
	float bt = frac(uv.y*res.y / 10.) / (res.y*0.1);
	float4 tt = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0)*_active;
	float d1 = step(distance(uv.y, f10 - 5 * _sp / res.y), 5.*_sp / res.y);
	float d2 = step(distance(uv.y, f12 - 5. *_sp / res.y), 5. *_sp / res.y);

	float2 ut2 = lerp(lerp(float2(ba, _p2 + bt),float2(lerp(_p2,_p1,_phase2st) + bt,ba),_phase2v), float2(ba, _p2 + bt), _phase3);
	float t2 = reader2.SampleLevel(_LinearClamp,ut2 + 0.5 / res, 0).a;
	float t4 = lerp(tt.x, t2, d1);

	float2 uu2 = lerp(lerp(float2(ba, 1. - _p2 + bt),float2(lerp(_p4,_p3,_phase2st) + bt,ba),_phase2v),float2(ba,  _p4 + bt),_phase3);
	float u2 = reader2.SampleLevel(_LinearClamp,uu2 + 0.5 / res, 0).a;
	float u4 = lerp(tt.y , u2, d1);

	float v2 = reader2.SampleLevel(_LinearClamp, float2(ba, _p1 + bt) + 0.5 / res, 0).a;
	float v4 = lerp(tt.z, v2, d2);

	float w2 = reader2.SampleLevel(_LinearClamp, float2(ba, _p3 + bt) + 0.5 / res, 0).a;
	float w4 = lerp(tt.w, w2, d2);

	writer[id] =float4(t4,u4,v4,w4);
}
[numthreads(8, 8, 1)]
void CSMain_t3(uint2 id : SV_DispatchThreadID)
{
	//float tt1 = lerp(_time, _timePhase31, _phase3) / _speed1;
	//float tt2 = lerp(_time, _timePhase32, _phase3) / _speed1;

	float ba = frac(_time / _speed2);
	float2 v1 =lerp(lerp(float2(ba, _p2) , float2(lerp(_p2, _p1, _phase2st),ba) , _phase2v), float2(ba, lerp(_p1,_p2, _phase3st)), _phase3);
	float2 v2 =  lerp(lerp(float2(ba, 1. - _p2),float2(lerp(_p4, _p3, _phase2st),ba), _phase2v),float2(ba, lerp(_p3,_p4,_phase3st)) , _phase3);
	float d1 = reader.SampleLevel(_LinearClamp, v1, 0).x;
	float d2 = reader.SampleLevel(_LinearClamp, v2, 0).y;
	float d7 = lerp(d1, reader.SampleLevel(_LinearClamp, v1.yx, 0).x, step(0.01, d1));
	float d8 = lerp(d2, reader.SampleLevel(_LinearClamp, v2.yx, 0).y, step(0.01, d2));
	float ff3 = frac(floor(_tsolo / _speed1)*5. / _resy * lerp(1., 0.5, _phase3));
	float tso = frac(ff3);
	float m3 = _lhv;

	float ffom = map2(0.4, 0.6, tso);
	float mfom = step(length(ffom - 0.5), 0.5);
	float ffom2 = frac(length(tso)*4.);
	float mfom2 = step(length(1. - tso - _p1), 0.125);
	float fom22 = lerp(lerp(1., mfom, _state), lerp(mfom2, 1., _state),m3);
	float fom = lerp(lerp(tso, ffom*mfom, _state), lerp(ffom2*mfom2, tso, _state), m3);
	//float2 fomf = lerp(float2(fom, 0.5), float2(0.5, fom), lerp(1. - _lhv, _lhv, _state));

	float feom = frac(length(tso)*lerp(2.5, 5., step(0.4, tso)));
	float2 meom = float2(step(length(tso - _p1), 0.2), step(length(tso - _p3), 0.1));
	float2 meom2 = float2(step(length(tso - _p2), 0.1), step(length(tso - _p4), 0.1));
	float2 meom3 = lerp(meom, meom2, _phase2st);
	float neom = step(length(tso - _p1), 0.125);
	float neom2 = step(length(tso - 1. + _p1), 0.125);
	float fneom = frac(length(tso*4.));
	float2 eom = lerp(lerp(tso, meom3*feom, _phase2v), lerp(float2(neom , neom2)*fneom, tso, _phase2v), m3);
	float2 eomm = lerp(lerp(float2(1.,1.),meom3, _phase2v), lerp(float2(neom , neom2), float2(1., 1.), _phase2v), m3);

	float bom = map2(_poca.x, _poca.y, tso);
	float bbom = map2(_poca.z, _poca.w, tso);
	float2 vll3h = lerp(float2(0.8, 0.2), float2(0.6, 0.), _phase3st);
	float2 vll3f = lerp(float2(lerp(0.6, 0., 1. - _phase3st2), lerp(0.8, 0.2, 1. - _phase3st2)), float2(vll3h.y, vll3h.y), _phase3st3);
	float2 vll3e = lerp(float2(lerp(0.6, 0., _phase3st2), lerp(0.8, 0.2, _phase3st2)), float2(vll3h.x, vll3h.x), _phase3st3);
	float dom = map2(vll3e.x, vll3f.x, 1. - tso);
	float dom2 = map2(vll3e.y, vll3f.y, 1. - tso);
	float m1 =step(length(lerp(bom,dom,m3) - 0.5), 0.5) ;
	float m2 = step(length(lerp(bbom,dom2,m3) - 0.5), 0.5);
	float m1b = lerp(lerp(fom22, eomm.x, _phase2), m1, _phase3);
	float m2b = lerp(lerp(0., eomm.y, _phase2), m2, _phase3);

	float tso2 = lerp(lerp(fom,eom.x,_phase2), lerp(bom, dom, m3), _phase3);
	float tso3 = lerp(lerp(0.,eom.y,_phase2), lerp(bbom, dom2, m3), _phase3);
	float d3 = reader2.SampleLevel(_LinearClamp, float2(tso2, .5), 0).x;
	float d4  = reader2.SampleLevel(_LinearClamp, float2(tso3, .5), 0).y;
	float d5 = lerp(reader2.SampleLevel(_LinearClamp, float2(0.5, tso2), 0).x, d3, step(0.01, d3))*m1b;
	float d6 =  lerp(reader2.SampleLevel(_LinearClamp, float2(0.5,tso3), 0).y,d4, step(0.01, d4))*m2b;
	float r1 = pow(lerp(d7, d5, _solo),0.75);
	float r2 = pow(lerp(lerp(0., d8, max(_phase2, _phase3)), d6, _solo),0.75);
	t3Buffer2[0] = smoothstep(_reg1, _reg2,r1)*10.;
	t3Buffer2[1] = smoothstep(_reg1, _reg2, r2)*10.;
	//t3Buffer2[2] = smoothstep(_reg1, _reg2, d5*(1.-so))*10.;
	//t3Buffer2[3] = smoothstep(_reg1, _reg2, d6*(1. - so))*10.;
	t3Buffer2[2] = m1b * 10.*_solo*step(0.01, r1);
	t3Buffer2[3] = m2b * 10.*_solo*step(0.01,r2);
}
[numthreads(8, 8, 1)]
void CSMain2(uint3 id : SV_DispatchThreadID)
{
	float2 f = float2(id.x, id.y);
	float2 res = float2(1920., 1080.);
	float2 uv = f / res;
	float t1 = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;
	float t2 = reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;
	float t3 = reader3.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;

	float Directions = lerp(1.,8., _bluractivation);
	float Quality = lerp(1., 2., _bluractivation);
	float Size = (1. )*60.;
	float2 Radius = Size / float2(1920., 1080.);
	float3 c = float3(0., 0., 0.);
	for (float d = 0.0; d < Pi; d += Pi / Directions) {
		for (float e = 1.0 / Quality; e < 1.0; e += 1.0 / Quality) 
		{ c += reader4.SampleLevel(_LinearClamp, uv + float2(cos(d), sin(d))*Radius*e + 0.5 / res, 0).xyz; }
	}
	c /= Quality * Directions - 7.*_bluractivation;

	float n1 = smoothstep(0.45, 0.55, no(_c2 + 98.48))*_bluractivation;
	float n2 = smoothstep(0.45, 0.55, no(_c2 + 125.32))*_bluractivation;
	float n3 = smoothstep(0.45, 0.55, no(_c2 + 78.12))*_bluractivation;
	/*float ca = clamp(ov(lerp(t1, c.x, n1), lerp(0.5, hs(uv + 23.69), 0.)), 0, 1.);
	float cb = clamp(ov(lerp(t2, c.y, n2), lerp(0.5, hs(uv + 23.69), 0.)), 0., 1.);
	float cc = clamp(ov(lerp(t3, c.z, n3), lerp(0.5, hs(uv + 23.69), 0.)), 0., 1.);*/
	float ca = lerp(t1, c.x, n1);
	float cb = lerp(t2, c.y, n2);
	float cc = lerp(t3, c.z, n3);
	float dt = 2. / 3.;
	//////////////
	float t = _c1 * 0.5;
	float3 v1 = float3(ca, cb, cc);
	float3 v2 = float3(cb, cc, ca);
	float3 v3 = float3(cc, ca, cb);
	
	float rr1 = rd(t + 65.15);
	float r1 = step(0.5, rr1);
	float r2 = step(0.5, rd(t + 45.12));
	float r3 = step(dt, rd(t + 78.49));

	float3 tl1 = lerp(lerp(v1, v2, r2), v3, r3);
	float3 pc =tl1;
	float pc1 = exclusion(pc.x, pc.y);
	float pc2 = exclusion(pc.x, pc.z);
	float pc3 = exclusion(pc.y, pc.z);
	float pc4 = lerp(lerp(pc1, pc2, smoothstep(0.45, 0.55, no(_c3*0.5 + 95.17))), pc3, smoothstep(dt - 0.05*dt, dt + 0.05*dt, no(_c3*0.5 + 451.62)));
	float pc6 = lerp(smoothstep(0.9, 0.1, pow(pc4, 0.5)), smoothstep(0.1, 0.9, pow(pc4, 2.)), 0.);
	float pc7 = pow(lerp(pc.x, pc4, _step1to2),0.75);
	writer[id.xy] = float4(pc7,pc7,pc7, pc7);
}

