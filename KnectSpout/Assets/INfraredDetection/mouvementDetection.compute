#pragma kernel CSMain
#pragma kernel CSMain_t3
Texture2D<float4> reader; 
Texture2D<float4> reader2;
RWTexture2D<float4> writer;
SamplerState _LinearClamp;

float _time;
float _resx;
float _resy;
float _blur;
RWStructuredBuffer<float> t3Buffer;
RWStructuredBuffer<float> t3Buffer2;
float t3Array[5];
#define Pi 3.14159265359

[numthreads(8,8,1)]


void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	float2 res=float2(_resx, _resy);
	float2 uv = f / res;
/*
	float2 uv2 = float2(uv.x, 1. - uv.y);
	float Directions = 16.0; // BLUR DIRECTIONS (Default 16.0 - More is better but slower)
	float Quality = 4.0; // BLUR QUALITY (Default 4.0 - More is better but slower)
	float Size = _blur;//+texture(iChannel0,( inData.v_texcoord*resolution)/float2(1024)+548.).a*10.; // BLUR SIZE (Radius)
	float2 Radius = Size / res;
	float c = 0.;
	for (float d = 0.0; d < Pi; d += Pi / Directions)
	{
		for (float i = 1.0 / Quality; i <= 1.0; i += 1.0 / Quality)
		{
			c += reader2.SampleLevel(_LinearClamp, uv2 + float2(cos(d), sin(d))*Radius*i + 0.5 / res, 0).x;
		}
	}
	c /= Quality * Directions - 15.;*/

	
	float vid = pow(reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x, 0.5);
	float prev = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;

	float diff = abs(vid - prev);

	diff = smoothstep(0.2, 0.5, diff);
	float ta = 0.;
	diff = max(diff, reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).y*0.95);
	float bs = 1. / 33.;
	float bs2 = 1. / 33.;
	float2 bs3 = float2(bs, bs2);
	float vm = 1000.;
	//float2 g = float2(0.,0.); float vtot = 0.;
	float2 pm = float2(0.5,0.5);
	for (int i = 0; i <= 32; i++)
		for (int j = 0; j <= 32; j++) {
			float2 p = (float2(0.5,0.5) + float2(i, j))*bs3;
			float v = reader.SampleLevel(_LinearClamp, p + 0.5 / res, 0).y;
			float v2 = 1. - v;

			//g += p * v;
			//vtot += v;
			if (v2 < vm) {
				vm = v2;
				pm = p;
			}
			
		}
	
	if(pm.x == 0.5*bs)
	{//pm = float2(0.5, 0.5);
		ta = clamp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a - 0.05, 0., 1.);
	}
	else {
		ta = clamp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a + 0.05, 0., 1.);
	}
	//float2 m2 = g / vtot;
	float z1 = lerp(pm.x, pm.y, step(0.5, uv.x));
	//float z2 = lerp(m2.x, m2.y, step(0.75, uv.x));
	//float z3 = lerp(z1,z2, step(0.5, uv.x));
	//float va =clamp( 1.-_taille,0.05,1.);
	
	float z1f = lerp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).z, z1,0.05);
	//float z2f = lerp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a, z1, 0.05);
	

	writer[id] = float4(lerp(prev, vid, 0.5), diff, z1f, ta);
}
[numthreads(8, 8, 1)]
void CSMain_t3(uint2 id : SV_DispatchThreadID)
{	
		t3Buffer2[0] = reader.SampleLevel(_LinearClamp, float2(0.25, 1.), 0).z;
		t3Buffer2[1] = reader.SampleLevel(_LinearClamp, float2(0.75, 1.), 0).z;
		t3Buffer2[2] = reader.SampleLevel(_LinearClamp, float2(0.75, 1.), 0).a;
}

