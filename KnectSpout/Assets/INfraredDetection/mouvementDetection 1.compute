#pragma kernel CSMain
#pragma kernel CSMain_t3
#pragma kernel CSMain2
Texture2D<float4> reader; 
Texture2D<float4> reader2;
Texture2D<float4> reader3;
Texture2D<float4> reader4;
RWTexture2D<float4> writer;
SamplerState _LinearClamp;

float _time;
float _resx;
float _resy;
float _blur;
float _float1;
float _float2;
float _float3;
float _taille1;
float _taille2;
float _floatA;
float _secondPhase;
float _troisiemePhase;
float _c1;
float _value;
RWStructuredBuffer<float> t3Buffer;
RWStructuredBuffer<float> t3Buffer2;
float t3Array[5];
#define Pi 3.14159265359
float rd(float t) { return frac(sin(dot(floor(t), 45.266))*7845.236); }

[numthreads(8,8,1)]
void CSMain (uint2 id : SV_DispatchThreadID) 
{
	
	float2 f = float2(id.x,id.y);
	float2 res=float2(_resx, _resy);
	float2 uv = f / res;

	float vid = pow(reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).y,0.5);
	float prev = reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x;

	float diff = abs(vid - prev);

	diff = smoothstep(0.2, 0.5, diff);
	float ta = 0.;
	diff = max(diff, reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).y*0.95);
	float bs = 1. / 33.;
	float bs2 = 1. / 33.;
	float2 bs3 = float2(bs, bs2);
	float vm = 1000.;
	//float2 g = float2(0.,0.); float vtot = 0.;
	float2 pm = float2(0.5,0.5);
	for (int i = 0; i <= 32; i++)
		for (int j = 0; j <= 32; j++) {
			float2 p = (float2(0.5,0.5) + float2(i, j))*bs3;
			float v = reader.SampleLevel(_LinearClamp, p + 0.5 / res, 0).y;
			float v2 = 1. - v;

			//g += p * v;
			//vtot += v;
			if (v2 < vm) {
				vm = v2;
				pm = p;
			}
			
		}
	if(pm.x == 0.5*bs)
	{//pm = float2(0.5, 0.5);
		ta = clamp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a-0.05,0.,1.);
	}
	else {
		ta = clamp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).a+0.025, 0., 1.);
	}
	float z1 = lerp(pm.x, pm.y, step(0.5, uv.x));
	
	float z1f = lerp(reader.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).z, z1,0.025);
	

	writer[id] = float4(lerp(prev, vid, 0.5), diff, z1f, ta*_value);
}
[numthreads(8, 8, 1)]
void CSMain_t3(uint2 id : SV_DispatchThreadID)
{	
		t3Buffer2[0] = reader.SampleLevel(_LinearClamp, float2(0.25, 1.), 0).z;
		t3Buffer2[1] = reader.SampleLevel(_LinearClamp, float2(0.75, 1.), 0).z;
		t3Buffer2[2] = reader.SampleLevel(_LinearClamp, float2(0.75, 1.), 0).a;
}
[numthreads(8, 8, 1)]
void CSMain2(uint2 id : SV_DispatchThreadID)
{

	float2 f = float2(id.x, id.y);
	float2 res = float2(_resx, _resy);
	float2 uv = f / res;
	float t = _c1*23.;
	float r2 = step(0.2, rd(t + 45.12));
	float r3 = step(2. / 3., rd(t + 78.49));
	float t0 = lerp(lerp(reader2.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x, reader3.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x, r2),
		reader4.SampleLevel(_LinearClamp, uv + 0.5 / res, 0).x, r3);
	float2 us = (uv - 0.5)*2.;
	us.x *= 9. / 16.;
	us = (us*0.5) + 0.5;

	float t1 = reader.SampleLevel(_LinearClamp, lerp(float2(0.5, 0.5), float2(_float1,  _float2), _float3) + (lerp(uv,us,_float3*(1.-_secondPhase))- 0.5)
		*lerp(1., 0.25, _float3) + 0.5 / res, 0).y;
	float taille = rd(_floatA);
	float taille2 = taille * _taille2 + 2.;
	float xdiv = lerp(lerp(1.,floor(taille2), step(0.01,_float3)),4.,_secondPhase);
	float ydiv = lerp(lerp(1., floor((taille2)*(9./16.)), step(0.01,_float3)), 4., _secondPhase);
	float2 uv2 = float2(uv.x - (1. / xdiv), uv.y);
	if (uv.x < (1. / xdiv)) {
		uv2 = float2(uv.x + ((xdiv - 1.) / xdiv), uv.y - (1. / ydiv));
	}
	float outc =0.;
	if (uv.x < (1. / xdiv) && uv.y < (1. / ydiv)) {
		outc = reader.SampleLevel(_LinearClamp, frac(uv*float2(xdiv, ydiv)) + 0.5 / res, 0).a;
	}
	else {
		outc = reader.SampleLevel(_LinearClamp, uv2 + 0.5 / res, 0).r;
	}
	writer[id] = float4(outc, t0, taille,t1);
}

